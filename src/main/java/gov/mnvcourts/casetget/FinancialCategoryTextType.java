//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.03 at 11:26:33 PM CDT 
//


package gov.mnvcourts.casetget;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FinancialCategoryTextType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FinancialCategoryTextType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Bond"/>
 *     &lt;enumeration value="Case Fines and Fees"/>
 *     &lt;enumeration value="Draw Down Financial Account"/>
 *     &lt;enumeration value="Fines and Fees"/>
 *     &lt;enumeration value="Miscellaneous Fees"/>
 *     &lt;enumeration value="Registry"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "FinancialCategoryTextType")
@XmlEnum
public enum FinancialCategoryTextType {

    @XmlEnumValue("Bond")
    BOND("Bond"),
    @XmlEnumValue("Case Fines and Fees")
    CASE_FINES_AND_FEES("Case Fines and Fees"),
    @XmlEnumValue("Draw Down Financial Account")
    DRAW_DOWN_FINANCIAL_ACCOUNT("Draw Down Financial Account"),
    @XmlEnumValue("Fines and Fees")
    FINES_AND_FEES("Fines and Fees"),
    @XmlEnumValue("Miscellaneous Fees")
    MISCELLANEOUS_FEES("Miscellaneous Fees"),
    @XmlEnumValue("Registry")
    REGISTRY("Registry");
    private final String value;

    FinancialCategoryTextType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FinancialCategoryTextType fromValue(String v) {
        for (FinancialCategoryTextType c: FinancialCategoryTextType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
